heat_template_version: 2015-04-30

description: Simple template to deploy a single compute instance

parameters:
    key_name:
        type: string
        label: Key Name
        description: Name of key-pair to be used for compute instance
        default: cloudKeyKat
    private_key_name:
        type: string
        label: Private Key Name
        description: File name of private key
        default: cloud.key.kat
    image_web_id:
        type: string
        label: Image ID
        description: Image to be used for galaxy web instance
        default: 0b319606-add1-4204-9a56-ab98c932d248
    image_worker_id:
        type: string
        label: Image ID
        description: Image to be used for galaxy worker instance
        default: ubuntu14.04
    flavor:
        type: string
        label: Instance Type
        description: Type of instance (flavor) to be used
        default: m1.small
    private-network:
        type: string
        label: Private network name or ID
        description: Network to attach instance to.
        default: f866b0a7-e5ce-4f3e-a7f1-f8143bdc40b2 
    private-subnet:
        type: string
        description: Id of the private sub network for galaxy cluster
        default: afd0b09d-db7f-42f9-a78a-eb516010efc6 
    public-network: 
        type: string
        description: Id of the public network for galaxy cluster. Ends up being admin_floating_net.
        default: 43b451f3-4364-4432-b223-b1a686230d90

resources:
    my_database_server:
        type: OS::Nova::Server
        properties: 
            key_name: { get_param: key_name }
            image: { get_param: image_web_id }
            flavor: { get_param: flavor }
            networks:
              - port: { get_resource: public_database_port }
            user_data_format: RAW
            user_data: |
                  #!/bin/sh
                  su - ubuntu -c "sudo apt-get -y update"
                  su - ubuntu -c "sudo apt-get -y install postgresql postgresql-contrib"
                  su - postgres -c "createuser --superuser ubuntu"
                  su - postgres -c "createdb ubuntu"
                  #su - ubuntu -c "sudo sed -e '/host\ *all\ *all\ *127.0.0.1.*/d' /etc/postgresql/9.3/main/pg_hba.conf >output.txt"
                  #su - ubuntu -c "sudo cp output.txt /etc/postgresql/9.3/main/pg_hba.conf"
                  su - ubuntu -c "echo 'host all all 10.0.0.0/8 trust' | sudo tee --append /etc/postgresql/9.3/main/pg_hba.conf"
                  #su - ubuntu -c "export replacement=\'\*\'"
                  su - ubuntu -c sudo\ sed\ -e\ "s/\#listen_address\.\*/listen_addresses=\'\*\'/"\ /etc/postgresql/9.3/main/postgresql.conf\ >/home/ubuntu/output1.txt
                  su - ubuntu -c "sudo cp output1.txt /etc/postgresql/9.3/main/postgresql.conf"
                  service postgresql restart
    my_web_instance:
        type: OS::Nova::Server
        properties:
            key_name: { get_param: key_name }
            image: { get_param: image_web_id }
            flavor: { get_param: flavor }
            networks: 
              - port: { get_resource: public_web_port }
            personality: { "/home/ubuntu/cloud.key.kat": { get_file: "/root/cloud.key.kat" }}
            user_data_format: RAW
            user_data: 
              str_replace:
                template: |
                  #!/bin/sh
                  chown -R ubuntu:ubuntu /home/ubuntu/
                  su - ubuntu -c "chmod g-rw cloud.key.kat"
                  su - ubuntu -c "sudo apt-get update"
                  su - ubuntu -c "sudo apt-get -y install crudini"
                  su - ubuntu -c "sudo apt-get -y install git"
                  su - ubuntu -c "sudo apt-get -y install nfs-kernel-server"
                  su - ubuntu -c "sudo apt-get -y install xmlstarlet"
                  su - ubuntu -c "cd /home/ubuntu"
                  su - ubuntu -c "git clone -b release_17.01 https://github.com/galaxyproject/galaxy.git"
                  su - ubuntu -c "webInternalAddress=$(ip route get 8.8.8.8 | awk '{print $NF; exit}')"
                  su - ubuntu -c "echo '/home/ubuntu/galaxy         *(rw,sync,no_root_squash)' | sudo tee --append /etc/exports"
                  su - ubuntu -c "mkdir /home/ubuntu/shed_tools"
                  su - ubuntu -c "echo '/home/ubuntu/shed_tools       *(rw,sync,no_root_squash)' | sudo tee --append /etc/exports"
                  su - ubuntu -c "sudo /etc/init.d/nfs-kernel-server start"
                  su - ubuntu -c "cp /home/ubuntu/galaxy/config/galaxy.ini.sample /home/ubuntu/galaxy/config/galaxy.ini"
                  su - ubuntu -c "cp /home/ubuntu/galaxy/config/job_conf.xml.sample_basic /home/ubuntu/galaxy/config/job_conf.xml"
                  su - ubuntu -c "crudini --set /home/ubuntu/galaxy/config/galaxy.ini server:main host 0.0.0.0"
                  #externalIp=$(curl http://169.254.169.254/meta-data/public-ipv4)
                  su - ubuntu -c "cd /home/ubuntu/galaxy"
                  su - ubuntu -c "crudini --set /home/ubuntu/galaxy/config/galaxy.ini app:main database_connection postgresql\:\/\/ubuntu\@$databaseIP\/ubuntu"
                  su - ubuntu -c "crudini --set /home/ubuntu/galaxy/config/galaxy.ini server:main host 0.0.0.0"
                  su - ubuntu -c "sh /home/ubuntu/galaxy/run.sh --daemon"
                  su - ubuntu -c "sh /home/ubuntu/galaxy/run.sh --stop-daemon"
                  #su - ubuntu -c "source /home/ubuntu/galaxy/.venv/bin/activate"
                  su - ubuntu -c "source /home/ubuntu/galaxy/.venv/bin/activate; pip install ansible==2.2"
                  su - ubuntu -c "git clone https://github.com/AAFC-MBB/Scalable-Galaxy-Env.git"
                  su - ubuntu -c "mv /home/ubuntu/Scalable-Galaxy-Env/delete.yaml /home/ubuntu/"
                  su - ubuntu -c "mv /home/ubuntu/Scalable-Galaxy-Env/myFirstCronJob.sh /home/ubuntu/"
                  su - ubuntu -c "mv /home/ubuntu/Scalable-Galaxy-Env/playbook.yaml /home/ubuntu/"
                  su - ubuntu -c "mv /home/ubuntu/Scalable-Galaxy-Env/xmladder.sh /home/ubuntu/"
                  su - ubuntu -c "mv /home/ubuntu/Scalable-Galaxy-Env/dbconnection.py /home/ubuntu/galaxy/scripts/"
                  su - ubuntu -c "cp /home/ubuntu/galaxy/config/job_conf.xml /home/ubuntu/galaxy/config/job_conf.temp.xml"
                  su - ubuntu -c "xmlstarlet ed --insert '/job_conf/handlers' --type attr -n default -v handlers /home/ubuntu/galaxy/config/job_conf.temp.xml > /home/ubuntu/galaxy/config/job_conf.xml"
                  su - ubuntu -c "sed -i '/<handler\ .*/d' /home/ubuntu/galaxy/config/job_conf.xml" 
                  su - ubuntu -c "cp /home/ubuntu/galaxy/config/job_conf.xml /home/ubuntu/galaxy/config/job_conf.temp.xml" 
                  su - ubuntu -c "xmlstarlet ed --subnode /job_conf/handlers --type elem -n handler --subnode '/job_conf/handlers/handler[last()]' --type attr -n id -v handler1 --subnode '/job_conf/handlers/handler[last()]' --type attr -n tags -v handlers /home/ubuntu/galaxy/config/job_conf.temp.xml >| /home/ubuntu/galaxy/config/job_conf.xml"
                  su - ubuntu -c "crudini --set /home/ubuntu/galaxy/config/galaxy.ini server:web0 use egg:Paste#http"
                  su - ubuntu -c "crudini --set /home/ubuntu/galaxy/config/galaxy.ini server:web0 port 8080"
                  su - ubuntu -c "crudini --set /home/ubuntu/galaxy/config/galaxy.ini server:web0 host 0.0.0.0"
                  su - ubuntu -c "crudini --set /home/ubuntu/galaxy/config/galaxy.ini server:web0 use_threadpool true"
                  su - ubuntu -c "crudini --set /home/ubuntu/galaxy/config/galaxy.ini server:web0 threadpool_workers 5"
                  su - ubuntu -c ". /home/ubuntu/galaxy/.venv/bin/activate; cd /home/ubuntu/galaxy; python /home/ubuntu/galaxy/scripts/paster.py serve config/galaxy.ini --server-name=web0 --pid-file=/home/ubuntu/galaxy/web0.pid --log-file=/home/ubuntu/galaxy/web0.log --daemon"
                  su - ubuntu -c "touch /home/ubuntu/admin-openrc.sh"
                  su - ubuntu -c "sudo mkdir /etc/ansible"
                  su - ubuntu -c "sudo touch /etc/ansible/ansible.cfg"
                  su - ubuntu -c "echo '[defaults]' | sudo tee --append /etc/ansible/ansible.cfg"
                  su - ubuntu -c "echo 'timeout=100' | sudo tee --append /etc/ansible/ansible.cfg"
                  su - ubuntu -c "echo 'export OS_USERNAME=admin' > /home/ubuntu/admin-openrc.sh"
                  su - ubuntu -c "echo 'export OS_PASSWORD=Blackb0x' >> /home/ubuntu/admin-openrc.sh"
                  su - ubuntu -c "echo 'export OS_TENANT_NAME=admin' >> /home/ubuntu/admin-openrc.sh"
                  su - ubuntu -c "echo 'export OS_AUTH_URL=https://openstack-dev.biodiversity.agr.gc.ca:5000/v2.0' >> /home/ubuntu/admin-openrc.sh"
                  #su - ubuntu -c "echo 'export OS_REGION_NAME=RegionOne' >> /home/ubuntu/admin-openrc.sh"
                  su - ubuntu -c "echo 'export ENDPOINT_TYPE=publicURL' >> /home/ubuntu/admin-openrc.sh"
                  su - ubuntu -c "echo 'export OS_INTERFACE=public' >> /home/ubuntu/admin-openrc.sh"
                  su - ubuntu -c "echo 'export OS_IDENTITY_API_VERSION=2' >> /home/ubuntu/admin-openrc.sh"
                  su - ubuntu -c "echo 'export private_network=private_network_web' >> /home/ubuntu/admin-openrc.sh"
                  su - ubuntu -c "echo 'export image_id=image_id_web' >> /home/ubuntu/admin-openrc.sh"
                  su - ubuntu -c "echo 'export key_name=key_name_web' >> /home/ubuntu/admin-openrc.sh"
                  su - ubuntu -c "echo 'export flavor=flavor_name_web' >> /home/ubuntu/admin-openrc.sh"
                  su - ubuntu -c "echo 'export private_key_name=private_key_name_web' >> /home/ubuntu/admin-openrc.sh"
                  su - ubuntu -c "echo 'export security_group=security_group_web' >> /home/ubuntu/admin-openrc.sh"
                  su - ubuntu -c "chmod u+x /home/ubuntu/myFirstCronJob.sh"
                  su - ubuntu -c "sudo apt-get -y install python-dev"
                  su - ubuntu -c ". /home/ubuntu/galaxy/.venv/bin/activate; pip install shade"
                  su - ubuntu -c ". /home/ubuntu/galaxy/.venv/bin/activate; . /home/ubuntu/admin-openrc.sh; cd /home/ubuntu/; ./myFirstCronJob.sh"
                  su - ubuntu -c "cp /home/ubuntu/galaxy/job_conf.xml /home/ubuntu/galaxy/job_conf.temp.xml"
                  su - ubuntu -c sed\ -i\ '/<handler\ id="handler1"/d' job_conf.temp.xml\ >job_conf.xml
                  su - ubuntu -c ". /home/ubuntu/galaxy/.venv/bin/activate; cd /home/ubuntu/galaxy; python /home/ubuntu/galaxy/scripts/paster.py serve config/galaxy.ini --server-name=web0 --pid-file=/home/ubuntu/galaxy/web0.pid --log-file=/home/ubuntu/galaxy/web0.log --stop-daemon"
                  su - ubuntu -c ". /home/ubuntu/galaxy/.venv/bin/activate; cd /home/ubuntu/galaxy; python /home/ubuntu/galaxy/scripts/paster.py serve config/galaxy.ini --server-name=web0 --pid-file=/home/ubuntu/galaxy/web0.pid --log-file=/home/ubuntu/galaxy/web0.log --daemon"
                  #echo "$databaseIP"
                  #crudini --set /home/ubuntu/galaxy/config/galaxy.ini server:main host $externalIp
                  #xmlstarlet ed --insert "/job_conf/handlers" --type attr -n default -v handlers job_conf.xml.sample_basic > job_conf.xml
                params:
                  $databaseIP: { get_attr: ["floating_database_ip", "floating_ip_address"]}
                  private_network_web: { get_param: private-network }
                  image_id_web: { get_param: image_web_id }
                  key_name_web: { get_param: key_name }
                  flavor_name_web: { get_param: flavor } 
                  private_key_name_web: { get_param: private_key_name }
                  security_group_web: external_access
    #my_worker_instance:
    #    type: OS::Nova::Server
    #    properties:
    #        key_name: { get_param: key_name }
    #        image: { get_param: image_worker_id }
    #        flavor: { get_param: flavor }
    #        networks:
    #          - port: { get_resource: public_worker_port }
    external_access:
        type: OS::Neutron::SecurityGroup
        properties:
          name: external_access
          description: incoming traffic access
          rules: [
          {remote_ip_prefix: 0.0.0.0/0,
            protocol: tcp,
            port_range_min: 8080,
            port_range_max: 8080},
          {remote_ip_prefix: 0.0.0.0/0,
            protocol: tcp,
            port_range_min: 22,
            port_range_max: 22},
          {remote_ip_prefix: 0.0.0.0/0,
            protocol: tcp,
            port_range_min: 5432,
            port_range_max: 5432},
          { remote_ip_prefix: 0.0.0.0/0,
            protocol: icmp},
          { remote_ip_prefix: 0.0.0.0/0,
            protocol: tcp,
            port_range_min: 2049,
            port_range_max: 2049},
          { remote_ip_prefix: 0.0.0.0/0,
            protocol: udp,
            port_range_min: 2049,
            port_range_max: 2049}]
    public_web_port:
        type: OS::Neutron::Port
        properties:
          network_id: { get_param: private-network }
          fixed_ips:
          - subnet_id: { get_param: private-subnet }
          security_groups:
          - { get_resource: external_access }
    floating_web_ip:
        type: OS::Neutron::FloatingIP
        properties:
           floating_network_id: { get_param: public-network }
           port_id: { get_resource: public_web_port }
    public_database_port:
        type: OS::Neutron::Port
        properties:
           network_id: { get_param: private-network }
           fixed_ips:
           - subnet_id: { get_param: private-subnet }
           security_groups:
           - { get_resource: external_access }
    floating_database_ip:
        type: OS::Neutron::FloatingIP
        properties: 
           floating_network_id: { get_param: public-network }
           port_id: { get_resource: public_database_port }
    #public_worker_port:
    #    type: OS::Neutron::Port
    #    properties:
    #      network_id: { get_param: private-network }
    #      fixed_ips:
    #      - subnet_id: { get_param: private-subnet }
    #      security_groups:
    #      - { get_resource: external_access }
    #floating_worker_ip:
    #    type: OS::Neutron::FloatingIP
    #    properties:
    #       floating_network_id: { get_param: public-network }
    #       port_id: { get_resource: public_worker_port }
outputs:
    instance_name:
        description: Name of the instance
        value: { get_attr: [my_web_instance, name] }
    instance_ip:
        description: The IP address of the deployed instance
        value: { get_attr: [my_web_instance, first_address] }

